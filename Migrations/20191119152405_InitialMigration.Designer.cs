// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TravelNow.Models;

namespace TravelNow.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20191119152405_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("TravelNow.Models.Address", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<string>("StreetAddress1")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("StreetAddress2")
                        .HasMaxLength(255);

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.HasKey("AddressID");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("TravelNow.Models.Booking", b =>
                {
                    b.Property<int>("BookingID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CheckIn");

                    b.Property<DateTime>("CheckOut");

                    b.Property<int>("GuestNum");

                    b.Property<int>("ListingID");

                    b.Property<int>("PetNum");

                    b.Property<double>("Total");

                    b.Property<int>("UserID");

                    b.HasKey("BookingID");

                    b.HasIndex("ListingID");

                    b.HasIndex("UserID");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("TravelNow.Models.Listing", b =>
                {
                    b.Property<int>("ListingID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AddressID");

                    b.Property<string>("Amenities");

                    b.Property<double>("BathNum");

                    b.Property<int>("BedNum");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("HostID");

                    b.Property<int>("MaxGuests");

                    b.Property<bool>("PetFriendly");

                    b.Property<double>("Price");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.HasKey("ListingID");

                    b.HasIndex("AddressID");

                    b.HasIndex("HostID");

                    b.ToTable("Listings");
                });

            modelBuilder.Entity("TravelNow.Models.ListingReview", b =>
                {
                    b.Property<int>("ReviewID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment")
                        .IsRequired();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatorID");

                    b.Property<int>("ListingID");

                    b.Property<int>("Rating");

                    b.HasKey("ReviewID");

                    b.HasIndex("CreatorID");

                    b.HasIndex("ListingID");

                    b.ToTable("ReviewsOfGuest");
                });

            modelBuilder.Entity("TravelNow.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AddressID");

                    b.Property<string>("Avatar");

                    b.Property<DateTime>("DOB");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.HasKey("UserID");

                    b.HasIndex("AddressID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TravelNow.Models.Booking", b =>
                {
                    b.HasOne("TravelNow.Models.Listing", "Listing")
                        .WithMany("Bookings")
                        .HasForeignKey("ListingID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TravelNow.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TravelNow.Models.Listing", b =>
                {
                    b.HasOne("TravelNow.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TravelNow.Models.User", "Host")
                        .WithMany("Listings")
                        .HasForeignKey("HostID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TravelNow.Models.ListingReview", b =>
                {
                    b.HasOne("TravelNow.Models.User", "Creator")
                        .WithMany("CreatedReviews")
                        .HasForeignKey("CreatorID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TravelNow.Models.Listing", "Listing")
                        .WithMany("Reviews")
                        .HasForeignKey("ListingID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TravelNow.Models.User", b =>
                {
                    b.HasOne("TravelNow.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
